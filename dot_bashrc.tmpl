# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -lh'
alias la='ls -Ah'
alias lla='ls -lAh'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# Enable VI mode

set -o vi
bind '"jk":vi-movement-mode'
export VISUAL=vim
export EDITOR="$VISUAL"

# Disable Ctrl-S for stopping
# stty -ixon
#===============================================================================
# Functions
#===============================================================================
mount-ryzen () {
	sshfs $FAR:/home/felix /media/felix/ryzen
	sshfs $FAR:/media/data /media/data
}

unmount-ryzen () {
	fusermount -u /media/felix/ryzen
	fusermount -u /media/data
}

p() {
	python -c "print(eval(\"$*\"))"
}

md2html() {
	pandoc $1 -c ~/lib/pandoc.css --self-contained -so $2
}

#make-github-url
mghu() {
	echo git@github.com:$1.git
}

{{- if eq .chezmoi.hostname "rzbl" }}

#===============================================================================
# rzbl specific configuration
#===============================================================================
export DISPLAY=$(/sbin/ip route | awk '/default/ { print $3  }')":0"

if ! timeout 1s xset q > /dev/null; then
	unset DISPLAY
fi;

export ryzen=141.30.80.37
export FAR="felix@$ryzen"
export WH=/mnt/c/Users/knorr
export jessie05="141.30.80.90"
export windl=/mnt/c/users/knorr/Downloads

alias e.="explorer.exe ."
alias fw-sesyn="ssh -L 8888:localhost:8888 -L 8887:localhost:8887 $FAR"
alias mount_n='sudo mount -t cifs \
	//fs1.klipsy1.psych.tu-dresden.de/neuroimaging ~/media/n -o \
	uid=felix,credentials=/home/felix/.n_mount_credentials'
alias mount_p='sudo mount -t cifs //vs-grp02.zih.tu-dresden.de/nic_projects\
	~/media/p -o uid=felix,credentials=/home/felix/.m_and_p_credentials'
alias mount_m='sudo mount -t cifs //vs-grp02.zih.tu-dresden.de/nic_austausch\
	~/media/m -o uid=felix,credentials=/home/felix/.m_and_p_credentials'
alias mount_all="mount_n;mount_m;mount_p"
alias wdnotes="nvim /mnt/c/Users/knorr/git/winman/devnotes.md"
alias fd=fdfind
alias bat=batcat

export PATH=/mnt/c/user/knorr/bin:$PATH
export PATH=$WH/bin:$PATH
export PATH=$WH/scoop/shims:$PATH
export PATH=$HOME/.cargo/bin:$PATH

w (){
	$1.exe "${@:2}"
}
{{- end }}
{{- if eq .chezmoi.hostname "TP-Felix" }}

#===============================================================================
# thinkpad specific configuration (Ubuntu)
#===============================================================================
alias mount-n='sudo mount -t cifs -o username=fknorr,domain=NEUROLOOP //10.136.17.62/neu-dat2$ /mnt/n'
alias connect-vpn='sudo openfortivpn vpn.neuroloop.de:443/test --username fknorr@neuroloop.de --trusted-cert 4c5a778703694d71ca6987df5b4484e3c0888815bd584c85d48e9efaa2ffc505'

# export SWAYSOCK=(ls /run/user/1000/sway-ipc.* | head -n 1)

make-compile-commands(){
	# ccls (the c language server) needs a file named compile_commands.json in a 
	# project folder to do its job. This file can be generated by cmake
	cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
	ln -s Debug/compile_commands.json .
}

{{- end }}
#===============================================================================
# Aliases & Vars
#===============================================================================
alias sai='sudo apt install -y'
alias sar='sudo apt remove -y'
alias tmux='tmux -2'
alias ca='chezmoi apply'
alias bashrc='chezmoi edit ~/.bashrc'
alias nvimrc='chezmoi edit ~/.config/nvim/init.vim'
alias swayrc='chezmoi edit ~/.config/sway/config'
alias vimrc='chezmoi edit ~/.vimrc'
alias sbrc="source ~/.bashrc"
alias uau='sudo apt update && sudo apt upgrade -y'
# Its for X, I use wayloand now, but in case I switch back, I keep it
# alias clip-image-to-file="xclip -selection clipboard -t image/png -o >"
alias ranger='source ranger'
alias pyenv-shared-install='env PYTHON_CONFIGURE_OPTS='--enable-shared' pyenv install'
alias fd=fdfind

export PYTHONBREAKPOINT='ipdb.set_trace'

export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/.pyenv/shims:$PATH
export PATH=$HOME/.pyenv/bin:$PATH
export PATH=/opt/mssql-tools/bin:$PATH
#===============================================================================
# Bash bookmarks
#===============================================================================

bm (){
	echo `pwd` >> ~/.bash_bookmarks
}

__echo_contents() {
	cat $1 | sed 's/#.*//g' | sed '/^\s*$/d'
}

j() {
   local dest_dir=$(__echo_contents ~/.bash_bookmarks | fzf -q "$*" )
   if [[ $dest_dir != '' ]]; then
      cd "$dest_dir"
   fi
}

#===============================================================================
# fzf config
#===============================================================================

_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

#===============================================================================
# other usefull functions
#===============================================================================
mkcd() {
	mkdir -p $@
	cd ${@: -1}
}

zdo(){
	zathura "$@" & disown
}

#===============================================================================
# loading extensions
#===============================================================================
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

eval "$(direnv hook bash)"

. "$HOME/.cargo/env"

[ -f "/home/felix/.ghcup/env" ] && source "/home/felix/.ghcup/env" # ghcup-env

